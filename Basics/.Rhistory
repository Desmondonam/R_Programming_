a <- 20
b <- 90
if (b > a) {
print("b is greater than a ")
}
b <- 10
if (b > a) {
print("b is greater than a ")
}
b <- 20
if (b > a) {
print("b is greater than a ")
}
if (b > a) {
print("b is greater than a ")
} else if (a == b) {
print("a and b are equal")
}
# Nested if else statement
a <- 200
b <- 30
a <- 200
b <- 30
if (b > a) {
print("b is greater than a")
}else if (a == b){
print('a and b are equal')
}else {
print('a is greater than b')
}
### While loops
i <- 1
while (i < 6) {
print(i)
i < i + 1
}
i <- i + 1
### While loops
i <- 1
while (i < 6) {
print(i)
i <- i + 1
}
## Break
i <- 1
while (i < 6){
print(i)
if (i == 4) {
break
}
}
while (i < 6){
print(i)
i <- i + 1
if (i == 4) {
break
}
}
# Another example
x <- 1
# Create a while loop
while (x <= 10) {
print(x)
# Increment
x <- x + 1
if (x > 5) {
# Exit from the loop
break
}
}
i <- 0
while (i < 6) {
i <- i + 1
if (i == 3) {
next
}
print(i)
}
print(x)
# FOr Loops
for (x in 1:10) {
print(x)
}
fruits <- list("Apple","Banana", "Cherry", "Orange", "Pawpaw")
for (x in fruits) {
print(x)
}
# Sample data
group1 <- c(25, 30, 35, 40, 45)
group2 <- c(20, 22, 25, 27, 30)
group3 <- c(15, 18, 20, 23, 25)
# Create sample data for a two-way ANOVA
factor1 <- factor(rep(1:2, each = 15))
factor2 <- factor(rep(1:3, times = 10))
values <- rnorm(30)
# Combine the data into a data frame
data <- data.frame(Factor1 = factor1, Factor2 = factor2, Value = values)
# Perform a two-way ANOVA
anova_result <- aov(Value ~ Factor1 * Factor2, data = data)
# Summarize the ANOVA results
summary(anova_result)
# Generate a simple random sample of size 50 from a vector x
sample_result <- sample(x, size = 50)
# In simple random sampling, each item or individual in the population has an equal chance of being selected.
# Generate a variable x with 1000 random data points between 0 and 1
x <- runif(1000)
# Generate a simple random sample of size 50 from a vector x
sample_result <- sample(x, size = 50)
sample_result
#Stratified sampling divides the population into subgroups (strata) based on
# certain characteristics and then samples from each stratum.
library(dplyr)
# Stratified sampling by a categorical variable "group"
stratified_sample <- data %>% group_by(group) %>% sample_n(size = 10)
data <- x
# Stratified sampling by a categorical variable "group"
stratified_sample <- data %>% group_by(group) %>% sample_n(size = 10)
# Generate random data from a binomial distribution
n_trials <- 100
probability_of_success <- 0.3
data <- rbinom(n = 1000, size = n_trials, prob = probability_of_success)
# Create a histogram to visualize the distribution
hist(data, breaks = seq(0, n_trials, by = 1), main = "Binomial Distribution", xlab = "Number of Successes")
## Normal Distribution
z<-seq(-3.5,3.5,0.1)  # 71 points from -3.5 to 3.5 in 0.1 steps
q<-seq(0.001,0.999,0.001)  # 1999 points from 0.1% to 99.9% on 0.1% steps
dStandardNormal <- data.frame(Z=z,
Density=dnorm(z, mean=0, sd=1),
Distribution=pnorm(z, mean=0, sd=1))
qStandardNormal <- data.frame(Q=q,
Quantile=qnorm(q, mean=0, sd=1))
head(dStandardNormal)
head(qStandardNormal)
# A: subtract the c.d. at -1 from the c.d. at 3
pnorm(3, 6, 4) - pnorm(-1, 6, 4)
# A: Use the quantile function
upper <- qnorm(0.95, 20, 10)
lower <- qnorm(0.05, 20, 10)
c(lower, upper)
### Poison Distribution
lower<-qpois(0.001, lambda=2.5)
upper<-qpois(0.999, lambda=2,5)
n<-seq(lower,upper,1)
q<-seq(0.001,0.999,0.001)
dPoisson25 <- data.frame(N=n,
Density=dpois(n, lambda=2.5),
Distribution=ppois(n, lambda=2.5))
qPoisson25 <- data.frame(Q=q, Quantile=qpois(q, lambda=2.5))
head(dPoisson25)
head(qPoisson25)
# Generate random data from a binomial distribution
n_trials <- 100
probability_of_success <- 0.3
data <- rbinom(n = 1000, size = n_trials, prob = probability_of_success)
# Create a histogram to visualize the distribution
hist(data, breaks = seq(0, n_trials, by = 1), main = "Binomial Distribution", xlab = "Number of Successes")
## Normal Distribution
z<-seq(-3.5,3.5,0.1)  # 71 points from -3.5 to 3.5 in 0.1 steps
q<-seq(0.001,0.999,0.001)  # 1999 points from 0.1% to 99.9% on 0.1% steps
dStandardNormal <- data.frame(Z=z,
Density=dnorm(z, mean=0, sd=1),
Distribution=pnorm(z, mean=0, sd=1))
qStandardNormal <- data.frame(Q=q,
Quantile=qnorm(q, mean=0, sd=1))
head(dStandardNormal)
head(qStandardNormal)
# A: subtract the c.d. at -1 from the c.d. at 3
pnorm(3, 6, 4) - pnorm(-1, 6, 4)
# A: Use the quantile function
upper <- qnorm(0.95, 20, 10)
lower <- qnorm(0.05, 20, 10)
c(lower, upper)
### Poison Distribution
lower<-qpois(0.001, lambda=2.5)
upper<-qpois(0.999, lambda=2,5)
n<-seq(lower,upper,1)
q<-seq(0.001,0.999,0.001)
dPoisson25 <- data.frame(N=n,
Density=dpois(n, lambda=2.5),
Distribution=ppois(n, lambda=2.5))
qPoisson25 <- data.frame(Q=q, Quantile=qpois(q, lambda=2.5))
head(dPoisson25)
head(qPoisson25)
# In simple random sampling, each item or individual in the population has an equal chance of being selected.
# Generate a variable x with 1000 random data points between 0 and 1
x <- runif(1000)
# Generate a simple random sample of size 50 from a vector x
sample_result <- sample(x, size = 50)
sample_result
#Stratified sampling divides the population into subgroups (strata) based on
# certain characteristics and then samples from each stratum.
library(dplyr)
# Stratified sampling by a categorical variable "group"
stratified_sample <- data %>% group_by(group) %>% sample_n(size = 10)
# In systematic sampling, you select every nth item from the population.
# You can use indexing and sequence functions in R to implement systematic sampling.
# Select every 5th item from a vector x
systematic_sample <- x[seq(5, length(x), by = 5)]
systematic_sample
# In systematic sampling, you select every nth item from the population.
# You can use indexing and sequence functions in R to implement systematic sampling.
# Select every 5th item from a vector x
x
library(dplyr)
# Randomly select clusters from a data frame with a "cluster" variable
cluster_sample <- data %>% group_by(cluster) %>% sample_n(size = 2)
'''
The more can be found here
https://www.analyticsvidhya.com/blog/2015/07/guide-data-visualization-r/
Here we are to create:
Basic Visualization
Histogram
Bar / Line Chart
Box plot
Scatter plot
Advanced Visualization
Heat Map
Mosaic Map
Map Visualization
3D Graphs
Correlogram
'''
install.packages("tidyverse")
# Resource : https://r4ds.had.co.nz/data-visualisation.html
library(tidyverse)
# mgp dataframe
View(mpg)
# Creating a ggplot
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
# A graphing template
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
# Left
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
# Right
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, col = "blue"))
# Facets
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
# geometric objects
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
#display mult geoms
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
#other
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
geom_bar()
# Demo
demo <- tribble(
~cut,         ~freq,
"Fair",       1610,
"Good",       4906,
"Very Good",  12082,
"Premium",    13791,
"Ideal",      21551
)
ggplot(data = demo) +
geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.min = min,
fun.max = max,
fun = median
)
#Position Adjustment
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, colour = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
#clarity
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
# Or
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) +
geom_bar(alpha = 1/5, position = "identity")
ggplot(data = diamonds, mapping = aes(x = cut, colour = clarity)) +
geom_bar(fill = NA, position = "identity")
# Position fill
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")
# Position dodge
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge")
#other
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), position = "jitter")
# Cood flip
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
# Maps
nz <- map_data("nz")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
# Bar plots
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
## -----------------------
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline() +
coord_fixed()
# Interactive ggplot2
install.packages('plotly')
install.packages('gapminder')
library(ggplot2)
library(plotly)
library(gapminder)
p <- gapminder %>%
filter(year==1977) %>%
ggplot( aes(gdpPercap, lifeExp, size = pop, color=continent)) +
geom_point() +
theme_bw()
ggplotly(p)
'''
Resources
----------
https://intellipaat.com/blog/tutorial/r-programming/data-visualization-in-r/
https://r-graph-gallery.com/ggplot2-package.html
https://r4ds.hadley.nz/data-visualize.html
'''
